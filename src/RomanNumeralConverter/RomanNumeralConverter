import java.util.HashMap;
import java.util.Map;

public class RomanNumeralConverter {
    public static void main(String[] args) {
        String input = "LLXXXXVVVV";
        System.out.println(transformInput(input));
    }

    public static String transformInput(String input) {

        Map<Character,Integer> romanToInt = new HashMap<Character,Integer>();
        romanToInt.put('I', 1);
        romanToInt.put('V', 5);
        romanToInt.put('X', 10);
        romanToInt.put('L', 50);
        romanToInt.put('C', 100);
        romanToInt.put('D', 500);
        romanToInt.put('M', 1000);

        int sum = 0;

        //convert roman numeral string to an integer value
        for(int i = 0; i < input.length(); i++) {
            char ch = input.charAt(i);
            if(romanToInt.containsKey(ch)) {
                sum += romanToInt.get(ch);
            }
        }

        String roman = "";

        while(sum >= 1000) {
            roman += "M";
            sum -= 1000;
        }

        if(sum >= 500) {
            roman += "D";
            sum -= 500;
        }

        while(sum >= 100) {
            roman += "C";
            sum -= 100;
        }

        if(sum >= 50) {
            roman += "L";
            sum -= 50;
        }

        while(sum >= 10) {
            roman += "X";
            sum -= 10;
        }

        if(sum >= 5) {
            roman += "V";
            sum -= 5;
        }

        while(sum >= 1) {
            roman += "I";
            sum -= 1;
        }


 public static String transformInputOpyimize(String input) {

   Map<Character, Integer> romanToInt = new HashMap<>();
   romanToInt.put('I', 1);
   romanToInt.put('V', 5);
   romanToInt.put('X', 10);
   romanToInt.put('L', 50);
   romanToInt.put('C', 100);
   romanToInt.put('D', 500);
   romanToInt.put('M', 1000);

   int sum = 0;

   // Convert the roman numeral string to an integer value
   for (int i = 0; i < input.length(); i++) {
       sum += romanToInt.get(input.charAt(i));
   }

   int sum1 = input.chars()  // Create an IntStream of character codes
           .map(ch -> romanToInt.get((char) ch))  // Map each char to its integer value
           .sum();  // Sum the values


   // Roman numeral symbols and their corresponding values
   String[] romanSymbols = {"M", "D", "C", "L", "X", "V", "I"};
   int[] values = {1000, 500, 100, 50, 10, 5, 1};

   StringBuilder roman = new StringBuilder();

   // Build the Roman numeral string
   for (int i = 0; i < values.length; i++) {
       while (sum >= values[i]) {
           roman.append(romanSymbols[i]);
           sum -= values[i];
       }
   }
   return roman.toString();
}



        return roman;
    }

}
