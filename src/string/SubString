    public static void subStringWithNCube(){
        // complexity is N^3 : becauee subString method also has complexity
        String s = "abc";
        for(int i = 0 ; i<s.length(); i++){
            for(int j = i; j<=s.length(); j++){
                System.out.println(s.substring(i,j));
            }
        }
    }


    public static ArrayList subStringWithBetterOptization(int k ){
        String s = "aabacbebebe";
        int uniqueElements = k;
        int index = -1;
        int longest = 0;
        String subStr = "";
        Stack<String> stack = new Stack<>();

        ArrayList list = new ArrayList();
        for(int i = 0 ; i<s.length(); i++){
            for(int j = i; j<s.length(); j++){
                subStr = subStr + s.charAt(j);
                if(kUniqueElements(subStr, uniqueElements)){
                    if(subStr.length()>longest) {
                        stack.add(subStr);
                        index++;
                        longest = subStr.length();
                    }
                    list.add(subStr);
                //    System.out.println(subStr);
                }
            }
            subStr = "";
        }
        System.out.println("Longest SubString: "+stack.peek());
        return list;
    }
